# This is a simplified version of cmake's BasicConfigVersion-ExactVersion.cmake.in 
# modified with an override that allows an empty 
# PACKAGE_FIND_VERSION to be treated as a compatible match.
# Ideally CMake would support semver and this would be done via build_identifier
# see https://gitlab.kitware.com/cmake/cmake/-/issues/16716 for a discussion on this subject.

set(PACKAGE_VERSION @hdilib_package_version@)

if(PACKAGE_FIND_VERSION STREQUAL "") # always matches
        set(PACKAGE_VERSION_COMPATIBLE TRUE)
    else()
        if(@hdilib_package_version@ MATCHES "^([0-9]+\\.[0-9]+\\.[0-9]+)\\.") # strip the tweak version
            set(CVF_VERSION_NO_TWEAK "${CMAKE_MATCH_1}")
        else()
            set(CVF_VERSION_NO_TWEAK @hdilib_package_version@)
        endif()

        if(PACKAGE_FIND_VERSION MATCHES "^([0-9]+\\.[0-9]+\\.[0-9]+)\\.") # strip the tweak version
            set(REQUESTED_VERSION_NO_TWEAK "${CMAKE_MATCH_1}")
        else()
            set(REQUESTED_VERSION_NO_TWEAK "${PACKAGE_FIND_VERSION}")
        endif()

        if(REQUESTED_VERSION_NO_TWEAK STREQUAL CVF_VERSION_NO_TWEAK)
            set(PACKAGE_VERSION_COMPATIBLE TRUE)
        else()
            set(PACKAGE_VERSION_COMPATIBLE FALSE)
        endif()
endif()

if(PACKAGE_FIND_VERSION STREQUAL PACKAGE_VERSION)
    set(PACKAGE_VERSION_EXACT TRUE)
endif()

# if the installed or the using project don't have CMAKE_SIZEOF_VOID_P set, ignore it:
if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "" OR "@CMAKE_SIZEOF_VOID_P@" STREQUAL "")
    return()
endif()

# check that the installed version has the same 32/64bit-ness as the one which is currently searching:
if(NOT CMAKE_SIZEOF_VOID_P STREQUAL "@CMAKE_SIZEOF_VOID_P@")
    math(EXPR installedBits "@CMAKE_SIZEOF_VOID_P@ * 8")
    set(PACKAGE_VERSION "${PACKAGE_VERSION} (${installedBits}bit)")
    set(PACKAGE_VERSION_UNSUITABLE TRUE)
endif()
